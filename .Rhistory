PM=sum(PM),
NI=sum(NI)) %>% rename(TAZ=value)
glimpse(theme_data)
glimpse(taz)
theme_data %>% select(TAZ, total_trips)
theme_data %>% select(TAZ, total_trips) %>% rename(value=2)
runApp()
theme_data %>% select(TAZ, total_trips) %>% rename(value=2)
test<-theme_data %>% select(TAZ, total_trips) %>% rename(value=2)
glimpse(test)
leaflet() %>%
addTiles(group = "OSM") %>%
addProviderTiles(providers$CartoDB.Positron, group ="CartoDB.Positron") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "TonerLite", options = providerTileOptions(noWrap = TRUE)) %>%
# setView(lng=-73.984213, lat=40.798932,zoom=8) %>%
addPolygons(data=taz %>% left_join(test, by="TAZ"),#layerId = ~TAZ, label = ~TAZ,
fillColor = ~ colorQuantile(palette = 'YlGnBu', domain = unique(test()$value))(value),
group = "first_map") %>%
addLayersControl(baseGroups = c( "CartoDB.Positron", "TonerLite", "OSM"),
position = "topright",
options = layersControlOptions(collapOD = TRUE))
leaflet() %>%
addTiles(group = "OSM") %>%
addProviderTiles(providers$CartoDB.Positron, group ="CartoDB.Positron") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "TonerLite", options = providerTileOptions(noWrap = TRUE)) %>%
# setView(lng=-73.984213, lat=40.798932,zoom=8) %>%
addPolygons(data=taz %>% left_join(test, by="TAZ"),#layerId = ~TAZ, label = ~TAZ,
fillColor = ~ colorQuantile(palette = 'YlGnBu', domain = unique(test$value))(value),
group = "first_map") %>%
addLayersControl(baseGroups = c( "CartoDB.Positron", "TonerLite", "OSM"),
position = "topright",
options = layersControlOptions(collapOD = TRUE))
View(test)
leaflet() %>%
addTiles(group = "OSM") %>%
addProviderTiles(providers$CartoDB.Positron, group ="CartoDB.Positron") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "TonerLite", options = providerTileOptions(noWrap = TRUE)) %>%
# setView(lng=-73.984213, lat=40.798932,zoom=8) %>%
addPolygons(data=taz %>% left_join(test, by="TAZ"),#layerId = ~TAZ, label = ~TAZ,
fillColor = ~ colorQuantile(palette = 'YlGnBu', domain = unique(test$value))(value), color='white',
group = "first_map") %>%
addLayersControl(baseGroups = c( "CartoDB.Positron", "TonerLite", "OSM"),
position = "topright",
options = layersControlOptions(collapOD = TRUE))
leaflet() %>%
addTiles(group = "OSM") %>%
addProviderTiles(providers$CartoDB.Positron, group ="CartoDB.Positron") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "TonerLite", options = providerTileOptions(noWrap = TRUE)) %>%
# setView(lng=-73.984213, lat=40.798932,zoom=8) %>%
addPolygons(data=taz %>% left_join(test, by="TAZ"),#layerId = ~TAZ, label = ~TAZ,
fillColor = ~ colorQuantile(palette = 'YlGnBu', domain = unique(test$value))(value), color='white',
fillOpacity = 1,
group = "first_map") %>%
addLayersControl(baseGroups = c( "CartoDB.Positron", "TonerLite", "OSM"),
position = "topright",
options = layersControlOptions(collapOD = TRUE))
leaflet() %>%
addTiles(group = "OSM") %>%
addProviderTiles(providers$CartoDB.Positron, group ="CartoDB.Positron") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "TonerLite", options = providerTileOptions(noWrap = TRUE)) %>%
# setView(lng=-73.984213, lat=40.798932,zoom=8) %>%
addPolygons(data=taz %>% left_join(test, by="TAZ"),#layerId = ~TAZ, label = ~TAZ,
fillColor = ~ colorQuantile(palette = 'YlGnBu', domain = unique(test$value))(value), color='white',
fillOpacity = 1, weight=2,
group = "first_map") %>%
addLayersControl(baseGroups = c( "CartoDB.Positron", "TonerLite", "OSM"),
position = "topright",
options = layersControlOptions(collapOD = TRUE))
leaflet() %>%
addTiles(group = "OSM") %>%
addProviderTiles(providers$CartoDB.Positron, group ="CartoDB.Positron") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "TonerLite", options = providerTileOptions(noWrap = TRUE)) %>%
# setView(lng=-73.984213, lat=40.798932,zoom=8) %>%
addPolygons(data=taz %>% left_join(test, by="TAZ"),#layerId = ~TAZ, label = ~TAZ,
fillColor = ~ colorQuantile(palette = 'YlGnBu', domain = unique(test$value))(value), color='white',
fillOpacity = .7, weight=2,
group = "first_map") %>%
addLayersControl(baseGroups = c( "CartoDB.Positron", "TonerLite", "OSM"),
position = "topright",
options = layersControlOptions(collapOD = TRUE))
runApp()
runApp()
glimpse(theme_data)
runApp()
colnames(theme_data)
glimpse(theme_data)
theme_data %>% select(TAZ, total_trips) %>% pivot_longer(cols=2:6) %>% rename(value=2)
theme_data %>% pivot_longer(cols=2:6)
theme_data %>% pivot_longer(cols=2:6) filter(name=='AM') %>% select(-2)
theme_data %>% pivot_longer(cols=2:6) %>% filter(name=='AM') %>% select(-2)
runApp()
runApp()
?leafletOutput
?renderLeaflet
?addPolygons
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
getwd()
# Read 'import.R' file --------------
### Imports data from processing script and GIS data
source("prep.R")
link<-st_read("data/ModelRun_(2024-01-19)-18_28_44/Network","Network_link") %>% st_transform(crs=4326) %>% distinct(NO, .keep_all = TRUE) %>%
left_join(link_df, by="NO") %>%
mutate(flow_adjusted=sqrt(Tot_Flow)/20,
Tot_Flow_clean=prettyNum(round(Tot_Flow), big.mark=","))
## link data ##
link_df <-fread("data/ModelRun_(2024-01-19)-18_28_44/Network/LinkTable.csv") %>%
group_by(NO) %>%
summarise(Tot_Flow=sum(Tot_Flow))
link<-st_read("data/ModelRun_(2024-01-19)-18_28_44/Network","Network_link") %>% st_transform(crs=4326) %>% distinct(NO, .keep_all = TRUE) %>%
left_join(link_df, by="NO") %>%
mutate(flow_adjusted=sqrt(Tot_Flow)/20,
Tot_Flow_clean=prettyNum(round(Tot_Flow), big.mark=","))
View(link)
source("prep.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
glimpse(link_df)
link_df <-fread("data/ModelRun_(2024-01-19)-18_28_44/Network/LinkTable.csv")
glimpse(link_df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
theme_data %>% pivot_longer(cols=2:6) %>% filter(name=='AM') %>% select(-2)
glimpse(taz)
st_area(taz)
sf_use_s2(FALSE)
st_area(taz)
st_area(taz)
data.frame(area_m=st_area(taz))
data.frame(area_m=as.numeric(st_area(taz)))
taz<-st_read("data",'srtc_taz') %>% st_transform(crs=4326) %>% filter(!is.na(layer))
taz <- bind_cols(taz,data.frame(area_m=as.numeric(st_area(taz))))
glimpse(taz)
theme_data %>% pivot_longer(cols=2:6) %>% filter(name=='AM') %>% select(-2)
glimpse(theme_data)
taz_df <-taz %>% data.frame() %>% select(TAZ,area_m)
## thematic data
theme_data<-bind_rows(
od_data %>% filter(FromZoneNo == ToZoneNo) %>% ungroup() %>% select(-FromZoneNo) %>% rename(value=ToZoneNo),
od_data %>% filter(FromZoneNo != ToZoneNo) %>% pivot_longer(cols=1:2) %>% group_by(value) %>%
summarise(total_trips=sum(total_trips),
AM=sum(AM),
MD=sum(MD),
PM=sum(PM),
NI=sum(NI))
) %>% group_by(value) %>%
summarise(total_trips=sum(total_trips),
AM=sum(AM),
MD=sum(MD),
PM=sum(PM),
NI=sum(NI)) %>% rename(TAZ=value) %>%
left_join(taz_df, by="TAZ")
glimpse(theme_data)
theme_data %>% pivot_longer(cols=2:6) %>% filter(name=='AM') %>% select(-2)
theme_data %>% pivot_longer(cols=2:7) %>% filter(name=='AM') %>% select(-2)
theme_data %>% pivot_longer(cols=2:7) %>% filter(name=='AM')
theme_data %>% pivot_longer(cols=2:7)
theme_data %>% pivot_longer(cols=2:6)
theme_data %>% pivot_longer(cols=2:6) %>% filter(name=='AM') %>% mutate(trips_per_area=value/area_m)
theme_data %>% pivot_longer(cols=2:6) %>% filter(name=='AM') %>% mutate(trips_per_area=(value/area_m)*100)
theme_data %>% pivot_longer(cols=2:6) %>% filter(name=='AM') %>% mutate(trips_per_area=(value/area_m)*100) %>% View()
theme_data %>% pivot_longer(cols=2:6) %>% filter(name=='AM') %>% mutate(trips_per_area=(value/area_m)*1000) %>% View()
theme_data %>% pivot_longer(cols=2:6) %>% filter(name=='AM') %>% mutate(trips_per_area=(value/area_m)*10000) %>% View()
runApp()
runApp()
runApp()
runApp()
glimpse(taz)
runApp()
runApp()
runApp()
glimpse(taz)
runApp()
runApp()
runApp()
runApp()
# NYMTC OD Flow Dashboard
# Developed by Reid Haefer
# Latest Update on 1/29/2024
# Read 'import.R' file --------------
### Imports data from processing script and GIS data
#py_install(c('pandas', 'datetime','json','requests','display'))
#reticulate::source_python('energy_gen.py')
source("prep.R")
ui <- dashboardPage(skin="black",
dashboardHeader(title="Climate Tech Ideas",titleWidth = 280,
tags$li(class = "dropdown",
tags$a(href="", target="_blank",
tags$img(height = "18px", alt="RSG Logo", src="RSG Logo.jpg")))
),
dashboardSidebar(disable=F,
uiOutput("ui_dashboard")
),
dashboardBody(
tabsetPanel(id="tabs",
tabPanel("Tool Info", value="info",
fluidRow(
column(width=6,
#box(width=12,
h2("Tool Overview"),
br(),
h4("This tool presents potential climate tech solutions and that are the outcome of the Terra.Do Software Stacks for Climate Tech Course. This information is comprised of 3 components which are accessed through the webpage tabs:"),
tags$ul(
tags$li(h4("Energy Generation")),
tags$li(h4("Electric Vehicles")),
tags$li(h4("Home DIY solutions"))
),
br(), br(),
img(src='RSG Logo.jpg',  height = 80, width = 250),
br(), br(),
h4(textOutput("app_version"), style="font-weight: normal")
#)
),
column(width=6,
img(src='Data Hub Banner Image.png',  height = 600, width = 700) # include page main photograph
)
)
),
tabPanel("Energy Generation", value="gen",
fluidRow(dataTableOutput("generation_table") %>% withSpinner(),
plotlyOutput("generation_plot"),
dataTableOutput("energy_consumed_locally_by_source_ba"),
plotlyOutput("energy_consumed_plot"),
dataTableOutput("usage_by_ba_and_generation_type")#,
#plotlyOutput("usage_by_ba_plot"),
#   column(width=8,
#              leafletOutput('map',height=800) %>% withSpinner()
#          ),
#   column(width=4,
#              valueBoxOutput("selected_zone", width=12),
#              dataTableOutput(outputId ="OD_flow_table"),
#              #style = 'overflow-x: scroll',
#            uiOutput('download_ui')
#          )
)
),
tabPanel("Electric Vehicles", value="ev"#,
# fluidRow(
#   column(width=8,
#              leafletOutput('map_network',height=800) %>% withSpinner()
#          )
# )
),
tabPanel("DIY Solutions",  value="diy",
fluidRow(box(width=12, title="",
column(width = 6,
leafletOutput('home_loc_map') %>% withSpinner()
),
column(width=6,
selectInput('input_iot_measure',"Select IOT Measure",
choices=unique(iot_long$name)),
plotlyOutput('iot_plot'))
)
),
fluidRow(dataTableOutput("iot_table")),
fluidRow(
box(width=12, title="Home Energy Model",
plotlyOutput("energy_balance"),
plotlyOutput("energy_model_plot1"),
plotlyOutput("energy_model_plot2")
)
)
)),
tags$style(HTML(".skin-black .main-sidebar { background-color: #000000;} .content-wrapper, .right-side {
background-color: #FFFFFF ;
}") ))
)
server <- function(input, output, session){
# output$ui_dashboard  <- renderUI({
#   if( input$input_iot_measure == "CO2 (ppm) - median" & ){
#
#   }
# })
output$home_loc_map <-  renderLeaflet({
leaflet() %>% addMarkers(home_longitude +.002, home_latitude +.001) %>% addTiles()
})
output$energy_model_plot1<- renderPlotly({
ggplotly(
baby_energy_model %>% ggplot(aes(timestamp, `Indoor Temperature (C)`)) + geom_col()
)
})
output$energy_model_plot1<- renderPlotly({
ggplotly(
baby_energy_model %>% ggplot(aes(timestamp)) +
geom_line(aes(y=`Outdoor Temperature (C)`, color="blue"))+
geom_line(aes(y=`Indoor Temperature (C)`, color="red"))#+
#geom_line(aes(y=hvac_mode))
)
})
output$energy_model_plot2<- renderPlotly({
ggplotly(
baby_energy_model %>% ggplot(aes(timestamp)) +
geom_line(aes(y=`Outdoor Temperature (C)`, color="blue"))+
geom_line(aes(y=`Indoor Temperature (C)`, color="red"))#+
#geom_line(aes(y=hvac_mode))
)
})
output$energy_balance <- renderPlotly({
ggplotly(
monthly_energy_balance_tidy %>% ggplot(aes(month, value, fill=variable)) + geom_col()
)
})
output$generation_plot<- renderPlotly({
ggplotly(
local_generation_grid_mix %>% ggplot(aes(period, `Generation (MWh)`, fill=`type-name`)) + geom_bar(stat='identity')
)
})
output$generation_table  <-renderDataTable({
local_generation_grid_mix
})
output$usage_by_ba_and_generation_type  <-renderDataTable({
usage_by_ba_and_generation_type
})
# output$usage_by_ba_plot <- renderPlotly({
#   ggplotly(
#     usage_by_ba_and_generation_type %>% View()
#       ggplot(aes(timestamp, `Usage (MWh)`, fill=generation_type)) + geom_area()
#   )
# })
output$energy_consumed_plot <- renderPlotly({
ggplotly(
energy_consumed_locally_by_source_ba %>% ggplot(aes(timestamp, `Power consumed locally (MWh)`, fill=fromba)) + geom_bar(stat='identity')
)
})
output$energy_consumed_locally_by_source_ba  <-renderDataTable({
energy_consumed_locally_by_source_ba
})
output$iot_plot  <-renderPlotly({
req(input$input_iot_measure)
ggplotly(
iot_long %>% filter(name== input$input_iot_measure) %>% ggplot(aes(hour, value)) + geom_line()
)
})
output$iot_table  <-renderDataTable({
datatable(iot_long %>% filter(name== input$input_iot_measure))
})
output$ui_dashboard  <- renderUI({
if(input$tabs=="gen"){
fluidPage(
# fluidRow(radioButtons('input_od',"Origin or Destination", choices=c("Origin","Destination"), inline=T)),
# box(width=12,background = 'black',p(tags$br(),HTML("This map shows trips from origin and destination TAZs throughout the region. Select a TAZ on the map and select Origin or Destination from the sidebar toggle to visualize trips from associated TAZs.")))
)
} else if(input$tabs=="ev"){
### Default to 2019 data if nothing is selected
fluidPage(
# box(width=12,background = 'black',p(tags$br(),HTML("")))
)
} else if(input$tabs=="diy"){
### Default to 2019 data if nothing is selected
fluidPage(
fluidRow(),
box(width=12,background = 'black',p(tags$br(),HTML("")))
)
}
})
}
shinyApp(ui, server)
max(345,34534,543543)
?valueBox
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
(11.79/14.62)/14.62
(11.79-14.62)/14.62
install.packages('openmeteo')
install.packages("openmeteo")
install.packages("openmeteo")
install.packages("openmeteo")
library(shiny)
library(shinydashboard)
library(shinyjs)
library(arrow)
library(data.table)
library(tidyverse)
library(sf)
library(leaflet)
library(plotly)
library(DT)
library(shinycssloaders)
library(shinyWidgets)
library(tigris)
library(scales)
library(RColorBrewer)
library(formattable)
library(reactablefmtr)
library(htmltools)
library(ggalluvial)
library(classInt)
library(lwgeom)
library(nasapower)
library(openmeteo)
Sys.Date()
weather_history(location=c(-119.981612, 38.918158), start="2014-2-15", end=Sys.Date(), hourly = T)
weather_history(location="South Lake Tahoe", start="2014-2-15", end=Sys.Date(), hourly = T)
install.packages('rlang')
install.packages("rlang")
weather_history(location="South Lake Tahoe", start="2014-2-15", end=Sys.Date(), hourly = T)
install.packages("rlang")
install.packages("rlang")
library(shiny)
library(shinydashboard)
library(shinyjs)
library(arrow)
library(data.table)
library(tidyverse)
library(sf)
library(leaflet)
library(plotly)
library(DT)
library(shinycssloaders)
library(shinyWidgets)
library(tigris)
library(scales)
library(RColorBrewer)
library(formattable)
library(reactablefmtr)
library(htmltools)
library(ggalluvial)
library(classInt)
library(lwgeom)
library(nasapower)
library(openmeteo)
weather_history(location="South Lake Tahoe", start="2014-2-15", end=Sys.Date(), hourly = T)
install.packages("vctrs")
library(shiny)
library(shinydashboard)
library(shinyjs)
library(arrow)
library(data.table)
library(tidyverse)
library(sf)
library(leaflet)
library(plotly)
library(DT)
library(shinycssloaders)
library(shinyWidgets)
library(tigris)
library(scales)
library(RColorBrewer)
library(formattable)
library(reactablefmtr)
library(htmltools)
library(ggalluvial)
library(classInt)
library(lwgeom)
library(nasapower)
library(openmeteo)
weather_history(location="South Lake Tahoe", start="2014-2-15", end=Sys.Date(), hourly = T)
remove.packages('vctrs')
remove.packages('vctrs')
remove.packages('rlang')
remove.packages('openmeteo')
install.packages('openmeteo')
library(shiny)
install.packages('rlang')
library(shiny)
library(shinydashboard)
library(shinyjs)
library(arrow)
install.packages('vctrs')
library(shiny)
library(shinydashboard)
library(shinyjs)
library(arrow)
library(data.table)
library(tidyverse)
library(sf)
library(leaflet)
library(plotly)
library(DT)
library(shinycssloaders)
library(shinyWidgets)
library(tigris)
library(scales)
library(RColorBrewer)
library(formattable)
library(reactablefmtr)
library(htmltools)
library(ggalluvial)
library(classInt)
library(lwgeom)
library(nasapower)
library(openmeteo)
weather_history(location="South Lake Tahoe", start="2014-2-15", end=Sys.Date(), hourly = T)
