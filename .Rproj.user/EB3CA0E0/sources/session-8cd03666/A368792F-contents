library(pacman)
p_load(sf, tidyverse, readxl, mapview, tidycensus, broom, arcgisbinding, feather, geojsonio)

mapviewOptions(fgb = FALSE)
test<-geojson_read("C:/Users/reid.haefer/Downloads/future_projects_2035.geojson", what='sp') %>% st_as_sf() 

mapshot(test %>% mapview(zcol="OBJECTID"), url= 'map.html')

## census
census_api_key("680398dff0a2f4c566f10c95888da7f25e55147b")

arc.check_product()

hu_redistrict <- get_decennial(geography = "block",state="WA", year= 2020 ,county="Spokane", variables="H1_001N", geometry = T,sumfile="pl") %>% st_transform(crs=4326)

load_variables(2010, "sf1", cache=T) %>% View()



write.csv(taz_cw_2019_data,"LU_Tools/data/input_data/SRTC_data/2019_Base_LU1_LU2_Worksheet_TAZ_cw.csv")


######################################## Final Model Input File Format #########################

block <-st_read("LU_Tools\\data\\input_data\\census_data\\tl_2020_53063_tabblock20", "tl_2020_53063_tabblock20")

final<-read_csv("LU_Tools\\data\\output_data_base\\FO_output_table_base.csv")

saep_new <- read_excel("Data\\saep_srtc_taz20_22.xlsx", sheet = "Housing Units", skip=11) %>%
  slice(1:622) %>%
  mutate(ZONE=as.numeric(TAZ_ID))

saep_new %>%
  left_join(final, by="ZONE") %>% View()

old<-st_read("LU_Tools\\data\\input_data\\TAZ_data","SRTC_Zones_RSG020723") %>%
  left_join(final, by=c("TAZ"="ZONE"))

new<-st_read("LU_Tools\\data\\input_data\\TAZ_data","SRTC_Zones_RSG021323") %>%
  left_join(final, by=c("TAZ"="ZONE"))

se-read_excel("land use.att Land_Use_Model_Format.xlsx", sheet="Sheet1")

tad_taz <- st_read("Data","srtc_landuse_2019_2045") %>% st_transform(crs=4326) %>%
  mutate(TAZ=as.character(TAZ))


fgdb_path <- file.path("DataHub/SRTC/SRTC.gdb")
arc.write(file.path(fgdb_path, "TAZ"), data=tad_taz %>% select(TAZ))
         


fgdb_path <- file.path("DataHub/SRTC/SRTC.gdb")
arc.write(file.path(fgdb_path, "TAD"), data=tad_taz %>% group_by(TAD) %>% summarise())

######################################## base population ########################################

#### 1) decennial census #### need to gather data

#### 2) SAEP #### need to get TAZ geometries. Are the SAEP TAZs the same as the model TAZs?

saep_tot<-read_excel('Data\\Washington State OFM Small Area Estimates\\saep_taz10.xlsx',sheet='Total Housing Units', skip=10) %>%
  filter(`County Name`=="Spokane") %>%
  mutate(TAZ=sub("^0+", "",  `Traffic Analysis Zone`)) %>%
  select(TAZ,`Estimated Total Housing Units 2010`) %>%
  rename(SAEP_tot_2010=`Estimated Total Housing Units 2010`)

saep_occ<-read_excel('Data\\Washington State OFM Small Area Estimates\\saep_taz10.xlsx',sheet='Occupied Housing Units', skip=10) %>%
  filter(`County Name`=="Spokane") %>%
  mutate(TAZ=sub("^0+", "",  `Traffic Analysis Zone`)) %>%
  select(TAZ,`Estimated Occupied Housing Units 2010`) %>%
  rename(SAEP_occ_2010=`Estimated Occupied Housing Units 2010`)

saep <- saep_tot %>%
  left_join(saep_occ, by="TAZ") %>%
  rowwise() %>%
  mutate(saep_occ_percent=SAEP_occ_2010/SAEP_tot_2010)

#### 3) assessor ####

mobile <- st_read("Data", "Mobile_Home_Parcels") %>% st_transform(crs=4326) %>%
  mutate(mobile_layer="mobile layer") %>%
  data.frame() %>%
  count(LOCATED_ON, name="mobile home units") 


assessor<-read_excel('Data\\Spokane County Assessor Data\\All Parcels with coordinates.xlsx',sheet='Sheet1') %>%
  filter(!is.na(latitude)) %>%
  st_as_sf(crs=4326, coords=c("longitude","latitude"))

assessor %>% mapview()

srtc_unit_type <- read_excel("2019_Base_LU1_LU2_Worksheet.xlsx",sheet="SFMF", skip=2) 

parcels <- st_read("Data\\Spokane County Assessor Data", "Parcels") %>% st_transform(crs=4326) %>%
  left_join(assessor %>% data.frame() %>% select(-geometry), by="parcel")%>%
  left_join(mobile, by=c("parcel"="LOCATED_ON")) %>%
  left_join(srtc_unit_type %>% select(Description,`Always Residential`,`SRTC Unit Type`,`Mobile Units`,`Units per Parcel Factor`,`Parcels w/Mobile Unit`,`Parcels w/Multiple Mobile Units`), by=c("description"="Description")) %>%
  mutate(R_flag=case_when(res_com_fl=="R" ~ "R", TRUE ~ NA_character_),
         C_flag=case_when(res_com_fl=="C" ~ "C", TRUE ~ NA_character_),
         DU=case_when(has.dwelling=="Yes" ~ "DU", TRUE ~ NA_character_),
         always_res=case_when(class.code %in% c(415,511,512,513,517,518,519,403,411,412,413,414,417,418,419,423,475,514) ~ "Yes", TRUE ~as.character("No"))
         ) %>%
  select(parcel,class.code,description, `mobile home units`,R_flag,C_flag,DU,always_res,`Always Residential`,`SRTC Unit Type`,`Mobile Units`,`Units per Parcel Factor`,`Parcels w/Mobile Unit`,`Parcels w/Multiple Mobile Units`) %>%
  mutate(res_type=case_when(DU=="DU" & `SRTC Unit Type`== "SF" ~ "SF", 
                            TRUE ~ NA_character_),
         units=case_when(!is.na(`mobile home units`) ~ as.numeric(`mobile home units`), 
                         res_type == "SF"  ~ `Units per Parcel Factor`,
                         TRUE ~ NA_real_))

sf::sf_use_s2(FALSE)
sf_taz<-st_join(parcels, tad_taz, largest=T) %>%
  data.frame() %>%
  group_by(TAZ) %>%
  summarise(sf_units=sum(units,na.rm=T))

sum(sf_taz$sf_units)

## acs total occupied housing units

acs_var<-load_variables('acs5', yea=2020)

acs_hus_taz<-get_acs(geography = "block group",state="WA", county="Spokane", variables=c("B25002_002","B25002_003"), year=2020, geometry=T) %>% st_transform(crs=4326) %>% 
  st_join(tad_taz, largest=T) %>%
  data.frame() %>%
  group_by(TAZ, variable) %>%
  summarise(estimate=sum(estimate,na.rm=T)) %>%
  pivot_wider(names_from=variable, values_from=estimate) %>%
  rename(acs_occ_units=B25002_002, acs_unocc_units=B25002_003) %>%
  rowwise() %>%
  mutate(acs_tot_units=sum(acs_occ_units,acs_unocc_units, na.rm=T))

# occupied and vacant housing units from decennial census at block group and join to tazs - tab "Census in worksheet"

decen_var<-load_variables('sf1', yea=2010)

decen_dus <- get_decennial(geography = "block",state="WA", year= 2010 ,county="Spokane", variables=c("H003002","H003003"), geometry = T) %>% st_transform(crs=4326) %>%
  st_join(tad_taz, largest=T) %>%
  group_by(TAZ, variable) %>%
  summarise(value=sum(value)) %>% data.frame() %>%
  pivot_wider(names_from = variable, values_from=value) %>%
  select(-geometry) %>%
  rename(decen_occ_dus=H003002, decen_vac_dus=H003003) %>%
  rowwise() %>%
  mutate(decen_tot_dus=decen_occ_dus + decen_vac_dus)

### final SFDU and MFDU file

final_res<-sf_taz %>% 
  left_join(decen_dus, by="TAZ") %>%
  left_join(saep, by="TAZ") %>%
  left_join(permit_sf, by="TAZ") %>%
  rowwise() %>%
  mutate(srtc_units=sum(decen_tot_dus, new_permit_units,na.rm=T), # add in the building permit data to decen units
         srtc_saep_comp=(SAEP_tot_2010-srtc_units)/SAEP_tot_2010, # calculate the percent different between decen and sae
         srtc_units_w_saep= case_when(srtc_saep_comp >= 0.1 ~SAEP_tot_2010, TRUE ~ as.numeric(srtc_units)), # if SAEP units are 10% or greater than decen,then use SAEP. if not use decen
  mfdu=srtc_units_w_saep - sf_units, # subtract to sf units from the total units to estimate MF units
  mfdu_occ=mfdu * saep_occ_percent, # apply SAEP occupancy 
  sfdu=sf_units,
  sfdu_occ=sfdu * saep_occ_percent) # apply SAEP occupancy 
glimpse(final_res)

final_res %>%
  summarise(du=sum(decen_tot_dus,na.rm=T), sfdu=sum(sf_units,na.rm=T), mfdu=sum(mfdu, na.rm=T))

## acs decen comparison

census_comp<-acs_hus_taz %>%
  left_join(decen_dus, by="TAZ")



srtc_parcel<-read_excel("Data/2019_Base_LU1_LU2_Worksheet.xlsx", sheet="parcel_rh") %>% tibble() %>%
  mutate(Parcel=round(Parcel,4),
         parcel_nchar=nchar(Parcel),
         Parcel1=str_pad(Parcel, 10, pad = "0", side="left"))

nchar(15222.9033)

str_pad(c(5243.9052,15222.9033), 10, pad = "0", side="left")

mutate(Parcel=str_pad(Parcel, 10, pad = "0"))
print(srtc_parcel$Parcel1, digits=10)


nchar(srtc_parcel$Parcel)


sum(srtc_parcel$`Final SFHU`)
sum(srtc_parcel$`Initial SFHU`)

#### 4) building permits ####


permit<-st_read("Data/SRTC_BuildingPermits_Full.gdb","Master_BuildingPermit_Table_2022") %>%
  st_as_sf(crs=4326, coords=c("X","Y")) %>%
  filter(Data_Collection_Year == 2021)

permit_21<-st_read("Data/SRTC_BuildingPermits_Full.gdb","BuildingPermits_2021") %>%
  st_as_sf(crs=4326, coords=c("X","Y")) 

permit %>% mapview()

permit_df<-read_excel("Data/2022 Master Building Permit Data Table_RH.xlsx", sheet="Sheet2")  %>%
  mutate(`Final Date`=as.Date(`Final Date`)) %>%
  filter(`Final Date`>="2021-01-01")

sum(permit_df$Units, na.rm=T)

%>%
  mutate(ParcelNumber=as.numeric(ParcelNumber),
    parcel=round(ParcelNumber,4),
    parcel=formatC(as.numeric(parcel),width=10,format='f',digits=4,flag='0'))
glimpse(permit_df)


permit_sf<-parcels %>% select(parcel) %>%
  left_join(permit_df, by='parcel') %>%
  filter(!is.na(Units)) %>%
  st_join(tad_taz, largest=T) %>%
  data.frame() %>%
  group_by(TAZ) %>%
  summarise(new_permit_units=sum(Units,na.rm=T))

## TAZ summary file ##

du_sum<-tad_taz %>%
  left_join(saep, by="TAZ") %>%
  left_join(decen_dus, by="TAZ") %>%
  left_join(permit_sf, by="TAZ") %>%
  dplyr::select(TAZ, JURISDICTI,`Estimated Total Population 2020`,decen_occ_dus, decen_vac_dus, decen_tot_dus, new_permit_units) %>%
  rename(saep_estimated_pop_2020=`Estimated Total Population 2020`)

######################################## base employment ########################################

## 1) ESD Raw Data ## need to figure out how to use given non - disclosure

## 2) LEHD ## use python library to grab this data

## Direct Source Employment Data ##

direct_employ <- read_excel("Data/Direct From Source Employment Data/large_employer_employees_by_location.xlsx", sheet="Sheet1")

## 4) BEA data ## theres an r package to grab this data - is there a python equivalent?

bea<-read_csv("Data/BEA_Employment_2020.csv", skip=4)

bea_industry <- bea %>% slice(9:36) %>% filter(!LineCode %in% c(80,90,2000,2010)) %>%
  rename(all_jobs=`2020`) %>%
  mutate(year=2020)
sum(bea_industry$all_jobs)

######################################## Lodging Data ########################################

## transient Accomodations Data LU3 ##

hotels<-read_csv("Data/Transient Accommodations Data (LU3)/Hotels_2020_DOH.csv")

######################################## Enrollment Data ########################################

student_commute <- read_excel("Data/Commuter Students (LU10)/Students_2019.xlsx", sheet="students")

######################################## LQA ########################################

uga <- st_read("Data","Urban_Growth_Areas")  %>% st_transform(crs=4326)

zoning <- st_read("Data","ZoningAllCounty")  %>% st_transform(crs=4326)

futurelu <- st_read("Data","FutureLU")  %>% st_transform(crs=4326)

sf::sf_use_s2(FALSE)
test<-st_join(parcels, zoning, largest=T)

## 1) Assessor Data ## parcels valued at less than $5000 are considered vacant

parcels <- st_read("Data\\Spokane County Assessor Data", "Parcels") %>% st_transform(crs=4326)

## 2) Critical Area Data ## parcels considered unsuitable for development

geo_haz <- st_read("Data/Critical Area Data (LQA)","GeologicalHazards") %>%
  st_as_sf(crs=4326)

geo_haz %>% mapview()

slopes <- st_read("Data/Critical Area Data (LQA)","SteepSlope30PercentOrGreater") %>%
  st_as_sf(crs=4326)

slopes %>% mapview()

water <- st_read("Data/Critical Area Data (LQA)","Waterbody") %>%
  st_as_sf(crs=4326)

water %>% mapview()

wetland <- st_read("Data/Critical Area Data (LQA)","Wetlands") %>%
  st_as_sf(crs=4326)

wetland %>% mapview()

## 3) LQA data from local jurisdictions ##

lqa_spokane_unincorp<-st_read("Data/Local Jurisdiction Completed LQA Data","LandQuantityAnalysis") %>% st_transform(crs=4326)
lqa_spokane_unincorp %>% mapview()

lqa_city_spokane<-st_read("Data/Local Jurisdiction Completed LQA Data","LQA_Calculations") %>% st_transform(crs=4326)
lqa_city_spokane %>% mapview()

lqa_spokane_valley<-st_read("Data/Local Jurisdiction Completed LQA Data","LCA_2020") %>% st_transform(crs=4326)

lqa_spokane_valley %>% mapview()

## 4) Comp Plan Table ##

comp_plan<-read_excel("Data/Local Jurisdiction Comprehensive Plan Land Use Table (LQA)/local_jurisdiction_comp_plan_lu.xlsx", sheet="Sheet1")

zoning <- 

##) 5 combine everything to estimate developable parcels
  sf::sf_use_s2(FALSE)
draft_lqa <- st_read("C:\\Users\\reid.haefer\\OneDrive - Resource Systems Group, Inc\\Documents - Projects\\Washington\\Spokane Regional Transportation Council\\SRTC\\Mapping\\SRTC GIS Analysis.gdb", "Vacant_Parcels") %>% st_transform(crs=4326)
lqa_taz<-st_join(draft_lqa, tad_taz, largest=T) %>%
  data.frame() %>%
  group_by(TAZ) %>%
  summarise(UNITS=sum(LU_DENSITY, na.rm=T))

######################################## Housing Forecast ########################################

####### Step 1 ###### # compute K (capacity) by TAZ, either a) remaining LQA capacity plus 2022 estimated population b) maximum historical population

# remaining LQA capacity plus 2022 estimated population -  need to convert LQA housing unit capacity to population using acs household size

# maximum historical population
saep_hist_pop<-read_excel('Data\\Washington State OFM Small Area Estimates\\saep_taz10.xlsx',sheet='Total Population', skip=10) %>%
  filter(`County Name`=="Spokane") %>%
  mutate(TAZ=as.numeric(sub("^0+", "",  `Traffic Analysis Zone`))) %>%
  select(c(31,6:26))

# put LQA housing unit capacity here - waiting on justin

# 2022 base housing units

base_housing<-read_csv("Data/base_final_files/taz_household_summary.csv")

# acs persons per household
acs_hh_size<-get_acs(geography = "county",state="WA", county="Spokane", variables=c("B25010_001"), year=2020, geometry=T) %>% st_transform(crs=4326) %>% pull(estimate)

# multiply housing units by acs

final_pop <-base_housing %>% select(SRTC_TAZ,TAZ_TOT_HU) %>% mutate(hh_size=acs_hh_size,population_K=TAZ_TOT_HU * acs_hh_size) %>%
  left_join(saep_hist_pop, by=c("SRTC_TAZ"="TAZ")) %>% pivot_longer(cols=c(5:25), names_to = "saep_year", values_to = "saep_pop_P") %>%
  mutate(`P/(K-P)` = saep_pop_P/ (population_K- saep_pop_P),
         natural_log=log(`P/(K-P)`)) %>%
 filter(!is.na(natural_log),
        !is.infinite(natural_log))

test<- final_pop %>% select(SRTC_TAZ, saep_year, natural_log) %>%
  pivot_wider(values_from = natural_log, names_from=saep_year)
test<-bind_cols(test,data.frame(nas=rowSums(is.na(test)))) %>%
  filter(nas !=20) %>%
  select(-nas)

slope_fn<-function(row_no){
data.frame(slope=
  lm(test %>% slice(row_no) %>% select(-1) %>% pivot_longer(cols=everything()) %>% pull(value) ~ 
     test %>% slice(row_no) %>% select(-1) %>% pivot_longer(cols=everything()) %>% pull(name)
) %>% tidy() %>% slice(1) %>% pull(estimate))
}

slopes<-map_dfr(.x=1:nrow(test), .f=slope_fn) 

K_and_P<-final_pop %>% select(SRTC_TAZ, saep_year, natural_log,population_K,saep_pop_P) %>% 
  pivot_wider(id_cols=c(SRTC_TAZ,population_K), names_from= saep_year, values_from=saep_pop_P )

slopes_final <- bind_cols(test, slopes) %>%
  rename(slope_k=slope) %>%
  select(SRTC_TAZ, slope_k) %>%
  left_join(K_and_P, by="SRTC_TAZ") %>%
select(SRTC_TAZ, slope_k,population_K,`Estimated Total Population 2020` ) %>% filter(!is.na(`Estimated Total Population 2020`)) %>%
  rename(P_2020_pop=`Estimated Total Population 2020`) %>%
  rename(P1_2020=P_2020_pop)

options(scipen=999)



sf_2021<-slopes_final %>% rowwise() %>% mutate(!!paste0("P1_",2021) := (!!as.name(quo_name(paste0("P1_",2021-1))) * (1+slope_k)) * (population_K-!!as.name(quo_name(paste0("P1_",2021-1))))/ population_K) %>% 
  select(!!paste0("P1_",2021), slope_k,population_K)

sf_2022<-sf_2021 %>% rowwise() %>% mutate(!!paste0("P1_",2022) := (!!as.name(quo_name(paste0("P1_",2022-1))) * (1+slope_k)) * (population_K-!!as.name(quo_name(paste0("P1_",2022-1))))/ population_K) %>% 
  select(!!paste0("P1_",2022), slope_k,population_K)

sf_2023<-sf_2022 %>% rowwise() %>% mutate(!!paste0("P1_",2023) := (!!as.name(quo_name(paste0("P1_",2023-1))) * (1+slope_k)) * (population_K-!!as.name(quo_name(paste0("P1_",2023-1))))/ population_K) %>% 
  select(!!paste0("P1_",2023), slope_k,population_K)

bind_


final_fn(2021)


bind_cols(
  slopes_final %>% select(SRTC_TAZ),
          
  map_dfc(.x=c(2021:2022), .f=final_fn)
  
          )


# add an additional 5% ($0.2 per year) to account for undevelopable land becoming developable

####### Step 2 ###### # compute r-max (lower case k)

# For each historical year (2000-2019), take the ratio of the standing population to the remaining capacity, or P/(K-P),
# Compute the natural log of each ratio,
# Estimate k as the slope of that series of natural logs (using Excel’s SLOPE function)
# Replace any zero estimates of k with 0.01 (again, to avoid later div-by-0 errors)

####### Step 3 ###### , for each year from 2020 to 2045, compute the projected population, P1, as the prior year’s population, P, times 1 plus the unconstrained growth rate,
# k, reduced by the ratio of remaining population capacity (K-P) to the total capacity - P1=P(1+k)* (K-P)/K




## 1) Spokane County OFM projection - a single control total number - 629823 - from gma_2017_1yr_2050 "Medium" tab

## 2) Recent and Expected Development ## example from Cheney - need to compbine all of the individual spreadsheets

dev_cheney<-read_excel("Data/Recent and Expected Development Data from Local Jurisdictions/Cheney_GrowthWorksheet.xlsx", sheet="TAB 2 Growth by TAZ") %>%
  filter(`...2` %in% c("CHENEY","CHENEY/SPOKANE COUNTY"))

## 3) SAEP - bring in saep historical population trends

saep

## 4) LQA - bring in LQA developable parcel data

## 5) Apply logistic growth model

######################################## Employment Forecast ########################################

## 1) establish control total by using the population to employment ratio

## 2) ESD Projection ## used to allocate growth to the individual employment sectors- outlined in model land use file

esd_forecast <- read_excel("Data/Employment Security Department (ESD) Employment Data/Long Term Industry Projections/long_aggregated_industry_2021.xlsx", sheet="Spokane", skip=4)

## 3) Recent and Expected Development ## example from Cheney - need to compbine all of the individual spreadsheets

dev_cheney<-read_excel("Data/Recent and Expected Development Data from Local Jurisdictions/Cheney_GrowthWorksheet.xlsx", sheet="TAB 2 Growth by TAZ") %>%
  filter(`...2` %in% c("CHENEY","CHENEY/SPOKANE COUNTY"))

## 4) SRTC allocates growth to TADs based upon LEHD historical growth rates - need to grab LEHD data

## 5) TAD to TAZ Allocation from local jurisdictions ## 

city_spokane_taz_allocation<-read_excel("Data/TAD to TAZ Allocation Data from Local Jurisdictions/CoS_Employment_Growth_Worksheet.xlsx", sheet="TAB 2 Growth by TAZ")

allocation_merged<-read_excel("Data/TAD to TAZ Allocation Data from Local Jurisdictions/Local_Growth_Round_Two_Summary.xlsx", sheet="Employment_Growth_Worksheets")


########### redistricting data comparison

taz<- st_read(".","SRTC_TAZ_Edits_CW_09202022") %>% st_transform(crs=4326)

comp<- read_csv("pl_tract_comparison_20220915.csv") %>%
  
pop_decen_10 <- get_decennial(geography = "tract",state="WA", year= 2020 ,county="Spokane", variables="P1_001N", geometry = T,sumfile="sf1") %>% st_transform(crs=4326)

pop_redistrict_tract <- get_decennial(geography = "tract",state="WA", year= 2020 ,county="Spokane", variables="P1_001N", geometry = T,sumfile="pl") %>% st_transform(crs=4326)

pop_redistrict_block <- get_decennial(geography = "block",state="WA", year= 2020 ,county="Spokane", variables="P1_001N", geometry = T,sumfile="pl") %>% st_transform(crs=4326)

test<-st_join(st_buffer(pop_redistrict_block,0), st_buffer(pop_redistrict_tract %>% select(geometry),0), largest=T
)

mapviewOptions(fgb = FALSE)
m<-pop_redistrict %>% select(GEOID) %>%
  left_join(comp %>% mutate(GEOID20=as.character(GEOID20)), by=c("GEOID"="GEOID20")) %>% 
  mutate(percent_diff_pop=(POP_TOT_pl-POP_TOT)/POP_TOT_pl,
         percent_diff_pop_abs=abs(percent_diff_pop),
         percent_diff_pop_cat=case_when(
           percent_diff_pop_abs > .5 ~ "> 50%",
           between(percent_diff_pop_abs, .25, .5) ~ "25-50%", 
           between(percent_diff_pop_abs, .1011, .249 ) ~ "10-25%", 
           percent_diff_pop_abs < .1 ~ " < 10%")) %>%
  select(GEOID,POP_TOT,HU_TOT,POP_TOT_pl,HU_TOT_pl,percent_diff_pop,percent_diff_pop_cat) %>%
  rename(block_taz_tract_pop=POP_TOT,
         block_taz_tract_HU=HU_TOT,
         tract_pop=POP_TOT_pl,
         tract_HU=HU_TOT_pl)
map <- m %>% mapview(zcol="percent_diff_pop_cat")

htmlwidgets::saveWidget(map@map, "SRTC_Map.html", selfcontained=T)


###



naics <- read_excel("srtc_naics_lu_crosswalk.xlsx", sheet="Sheet1", skip=1)

dummy<-data.frame(Employer=c(rep(sample(1:100,3000, replace=TRUE),each=1)),
           NAICS=c(rep(sample(naics$`NAICS Code`, 1000, replace=TRUE), 3) %>% tibble()  %>% rename(naics=".")),
           Employees=c(rep(sample(1:100,3000, replace=TRUE),each=1)),
           lat=c(47.619515),
           lon=c(-117.383839)) %>%
  mutate(Employer=paste("Employer Name", Employer, sep="-"),
         lat=lat+(row_number()/10000),
         lon=lon+(row_number()/10000))

write.csv(dummy, 'esd_dummy_data.csv', row.names = F)

dummy %>% st_as_sf(coords=c("lon","lat"), crs=4326) %>% mapview()


#####

load_variables(2020,'pl') %>%View()

acs_hh_size<-get_acs(geography = "block group",state="WA", county="Spokane", variables=c("B11016_002","B11016_003","B11016_004","B11016_005","B11016_006","B11016_007","B11016_008","B11016_010","B11016_011","B11016_012","B11016_013","B11016_013","B11016_014","B11016_015","B11016_016"), year=2020, geometry=T) %>% st_transform(crs=4326) %>%
  mutate(hh_size=case_when(variable %in% c("B11016_010") ~ 1,
                           variable %in% c("B11016_003","B11016_011") ~ 2,
                           variable %in% c("B11016_004","B11016_012") ~ 3,
                           variable %in% c("B11016_005","B11016_013") ~ 4,
                           variable %in% c("B11016_006","B11016_014") ~ 5,
                           variable %in% c("B11016_007","B11016_015") ~ 6,
                           variable %in% c("B11016_008","B11016_016") ~ 7))

test<-acs_hh_size %>% data.frame() %>% group_by(hh_size) %>% summarise(hhs=sum(estimate,na.rm=T)) %>%
  mutate(pop=hh_size * hhs) %>%
  slice(1:7) %>%
  adorn_totals() %>%
  mutate(source="ACS 2020")

## OFM

ofm<-st_read(".","saep_srtc_taz")

